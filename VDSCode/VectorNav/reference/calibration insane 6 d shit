# libraries
import sympy
import numpy as np
import matplotlib.pyplot as plt
import time
import math

samples = 100
z = [0] * samples

# take the arbitrary path 0g to 4g
x = np.linspace(4, -1, num=samples)
# take the arbitrary path 0g to 4g
y = np.linspace(-4, 3, num=samples)
for i in range(samples):
    zSqr = (x[i] ** 2) + (y[i] ** 2) - (9.8 ** 2)
    if zSqr == abs(zSqr):
        z[i] = math.sqrt(zSqr)
    else:
        z[i] = math.sqrt(-1 * zSqr)
z = np.array(z)
# Add noise
#xNoise = np.random.rand(len(x)) * .0002 - 1
#yNoise = np.random.rand(len(y)) * .0002 - 1
#zNoise = np.random.rand(len(z)) * .0002 - 1
# add bias and gain
xGain = 1.6
yGain = 1.5
zGain = 1.4
xBias = 1.3
yBias = 1.2
zBias = 1.1

ix = xGain * x + xBias
iy = yGain * y + yBias
iz = zGain * z + zBias

# Dependent variable

fig = plt.figure()
ax=fig.add_subplot(111, projection='3d')
ax.scatter(x,y,z)

ax.xlabel="Actual Gravity Acceleration"
ax.ylabel="Measured Gravity Acceleration"
plt.show()
fig = plt.figure()
ax1=fig.add_subplot(111, projection='3d')
ax1.scatter(ix,iy,iz)
plt.show()

# a, b = sympy.symbols('a b')
# result=sympy.solve([
#     np.sum((a*x+b-ix)*x),
#     np.sum(a*x+b-ix)],[a,b])
# print(result)
alpha = .0001

a,b= 2,2
for i in range(10000):
    a-=alpha*np.sum((a*x+b-ix)*x)
    b-=alpha*np.sum(a*x+b-ix)
print(a)
print(b)


# # objective function 9.81^2=x^2 + y^2 + z^2
# # cost function: error=1/2*Î£[((xi-mx)/sigmax)^2 + ((yi-my)/sigmay)^2 + ((zi-mz)/sigmaz)^2 - (9.8)^2]^2
# 
# mx, my, mz, bx, by, bz = sympy.symbols('mx my mz bx by bz')
# 
# #costFunction = (1 / 2) * ((((ix * mx) + bx) ** 2) + (((iy * my) + by) ** 2) + (((iz * mz) + bz) ** 2) - 9.8 ** 2) ** 2
# 
# costdmx = 192.08 * ix * (bx + ix * mx) * (
#         0.0104123281965848 * (bx + ix * mx) ** 2 + 0.0104123281965848 * (by + iy * my) ** 2 + 0.0104123281965848 * (
#         bz + iz * mz) ** 2 - 1)
# # print(costdmx)
# costdmy = 192.08 * iy * (by + iy * my) * (
#         0.0104123281965848 * (bx + ix * mx) ** 2 + 0.0104123281965848 * (by + iy * my) ** 2 + 0.0104123281965848 * (
#         bz + iz * mz) ** 2 - 1)  # sympy.diff(costFunction, my)
# # print(costdmy)
# costdmz = 192.08 * iz * (bz + iz * mz) * (
#         0.0104123281965848 * (bx + ix * mx) ** 2 + 0.0104123281965848 * (by + iy * my) ** 2 + 0.0104123281965848 * (
#         bz + iz * mz) ** 2 - 1)  # sympy.diff(costFunction, mz)
# # print(costdmz)
# costdbx = 4611.8408 * (0.041649312786339 * bx + 0.041649312786339 * ix * mx) * (
#         0.0104123281965848 * (bx + ix * mx) ** 2 + 0.0104123281965848 * (by + iy * my) ** 2 + 0.0104123281965848 * (
#         bz + iz * mz) ** 2 - 1)  # sympy.diff(costFunction, bx)
# # print(costdbx)
# costdby = 4611.8408 * (0.041649312786339 * by + 0.041649312786339 * iy * my) * (
#         0.0104123281965848 * (bx + ix * mx) ** 2 + 0.0104123281965848 * (by + iy * my) ** 2 + 0.0104123281965848 * (
#         bz + iz * mz) ** 2 - 1)  # sympy.diff(costFunction, by)
# # print(costdby)
# costdbz = 4611.8408 * (0.041649312786339 * bz + 0.041649312786339 * iz * mz) * (
#         0.0104123281965848 * (bx + ix * mx) ** 2 + 0.0104123281965848 * (by + iy * my) ** 2 + 0.0104123281965848 * (
#         bz + iz * mz) ** 2 - 1)
# 
# # sympy.diff(costFunction, bz)
# # print(costdbz)
# 
# costdmxSum = sympy.N(np.sum(costdmx), 8)
# costdbxSum = sympy.N(np.sum(costdbx), 8)
# costdmySum = sympy.N(np.sum(costdmy), 8)
# costdbySum = sympy.N(np.sum(costdby), 8)
# costdmzSum = sympy.N(np.sum(costdmz), 8)
# costdbzSum = sympy.N(np.sum(costdbz), 8)
# 
# alpha = .0000001
# 
# fmx=sympy.lambdify([mx,my,mz,bx,by,bz],costdmxSum)
# fmy=sympy.lambdify([mx,my,mz,bx,by,bz],costdmySum)
# fmz=sympy.lambdify([mx,my,mz,bx,by,bz],costdmzSum)
# fbx=sympy.lambdify([mx,my,mz,bx,by,bz],costdbxSum)
# fby=sympy.lambdify([mx,my,mz,bx,by,bz],costdbySum)
# fbz=sympy.lambdify([mx,my,mz,bx,by,bz],costdbzSum)
# #result=sympy.solve([fmx(mx,my,mz,bx,by,bz),fmy(mx,my,mz,bx,by,bz),fmz(mx,my,mz,bx,by,bz),fbx(mx,my,mz,bx,by,bz),fby(mx,my,mz,bx,by,bz),fbz(mx,my,mz,bx,by,bz)],[mx,my,mz,bx,by,bz])
# 
# #print(result)
# mx, my, mz, bx, by, bz = 2, 2, 2, 2, 2, 2
# 
# for i in range(10000):
#     mx -= alpha * fmx(mx,my,mz,bx,by,bz)
#     my -= alpha * fmy(mx,my,mz,bx,by,bz)
#     mz -= alpha * fmz(mx,my,mz,bx,by,bz)
#     bx -= alpha * fbx(mx,my,mz,bx,by,bz)
#     by -= alpha * fby(mx,my,mz,bx,by,bz)
#     bz -= alpha * fbz(mx,my,mz,bx,by,bz)
# 
# 
# 
# print(mx)
# print(my)
# print(mz)
# print(bx)
# print(by)
# print(bz)


